"use strict";

var newrelic = require("newrelic");

const datastore = require("../models/datastore");
const headers = require("../config/tapps-headers");
const util = require("./util");

var currentKey, previousKey;

// Security middleware
function security(req, res, next) {
    if (req.path === "/_ah/health") {
        // Health checks don't have the X-Tapps-Shared-Cloud-Secret so we can't apply the filter to all cases.
        return next();
    } else {
        // Save the transaction ID header to the response object now so we don't have to do it later.
        var transactionId = req.header(headers["transaction-id"]);
        if (transactionId) {
            res.set(headers["transaction-id"], transactionId);
        }
        var cloudSharedSecret = req.header(headers["shared-cloud-secret"]);
        if (cloudSharedSecret) {
            if (cloudSharedSecret === currentKey || cloudSharedSecret === previousKey) {
                // The API accepts both the current Cloud Shared Secret generated by the gateway and the previous one,
                // in order to avoid problems with requests being rejected right after it changes.
                return next();
            } else {
                // If the received key is different from the ones we have check if a new one was generated.
                datastore.read({
                    "id": "latest",
                    "kind": "SharedCloudSecret",
                    "namespace": "cloud-configs",
                    "callback": function(err, data) {
                        if (err) {
                            // Couldn't find the key in datastore
                            util.errorResponse(req, res, 500, 50000, "Failed to update server info.");
                        } else {
                            var receivedKey = data.key;
                            if (receivedKey !== currentKey) {
                                // A new key was generated, check if it matches the one received.
                                previousKey = currentKey;
                                currentKey = receivedKey;
                                if (cloudSharedSecret === currentKey || cloudSharedSecret === previousKey) {
                                    next();
                                } else {
                                    util.errorResponse(req, res, 403, 40300, "Invalid cloud secret header.");
                                }
                            } else {
                                // No new keys were generated, so the received one is invalid.
                                util.errorResponse(req, res, 403, 40300, "Invalid cloud secret header.");
                            }
                        }
                    }
                });
            }
        } else {
            util.errorResponse(req, res, 403, 40300, "Missing cloud secret header.");
        }
    }
}

// Basic 404 and 405 handler
function notFoundHandler(req, res) {
    if (Object.prototype.hasOwnProperty.call(res.locals, "methods") && Array.isArray(res.locals.methods)) {
        util.errorResponse(req, res, 405, 40500, "This endpoint only supports " + res.locals.methods.join(", ") + ".");
    } else {
        util.errorResponse(req, res, 404, 40400, "Page not found.");
    }
}

// Error handler
function errorHandler(err, req, res, next) {
    if (err.status === 400) {
        // When the body-parser middleware tries to parse a request and the body is not a json it generates an error.
        util.errorResponse(req, res, err.status, 40000, "Malformed request body.");
    } else {
        var logMessage = util.mergeResponse(req, err);
        util.logError(logMessage);
        newrelic.addCustomParameter(logMessage);
        util.errorResponse(req, res, 500, 50000, "");
    }
}

// Client Authentication
function authenticate(userId, req, res, next) {
    var serviceAccountName = req.header(headers["service-account-name"]);
    if (serviceAccountName) {
        next();
    } else {
        var gameUserIdData = JSON.parse(req.header(headers["game-user-id-data"]));
        if (gameUserIdData && (gameUserIdData.uid === userId || !userId)) {
            next();
        } else {
            util.errorResponse(req, res, 403, 40300, "Header " + headers["game-user-id-data"] + " is missing or invalid.");
        }
    }
}

module.exports = {
    authenticate,
    errorHandler,
    notFoundHandler,
    security
};